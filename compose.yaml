# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  server:
    container_name: sehat-mand
    image: theantiflash/sehat-mand:latest
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
      target: final
      args:
        - PASSWORD_ENV_SEEDED=some.long.password.fllkwefiwejf23049uwlekjf.sEFWEFGR98^&$
    ports:
      - 127.0.0.1:80:8080
      - 127.0.0.1:443:8081
    environment:
      - PASSWORD_ENV_SEEDED=some.long.password.fllkwefiwejf23049uwlekjf.sEFWEFGR98^&$
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${PASSWORD_ENV_SEEDED}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
#    network_mode: "host"
#      - 127.0.0.1:8081:7247
#    environment:
#      #- "ASPNETCORE_URLS=https://+;http://+"
#      - Kestrel__Certificates__Default__Path=/https/aspnetapp.pfx
#      - Kestrel__Certificates__Default__Password=changeit
#    volumes:
#      - ~/.aspnet/https:/https:ro 

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#    depends_on:
#       db:
#         condition: service_healthy
#         
#  db:
#   image: mysql:5.7
#   restart: always
#   environment:
#     MYSQL_DATABASE: 'ZongHRM'
#     # So you don't have to use root, but you can if you like
#     MYSQL_USER: 'user'
#     # You can use whatever password you like
#     MYSQL_PASSWORD: 'password'
#     # Password for root access
#     MYSQL_ROOT_PASSWORD: 'password'
#   ports:
#     # <Port exposed> : <MySQL Port running inside container>
#     - '3306:3306'
#   expose:
#     # Opens port 3306 on the container
#     - '3306'
#     # Where our data will be persisted
#   #healthcheck:
#    #       test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
#    #       interval: 10s
#    #       timeout: 5s
#    #       retries: 5
#   volumes:
#     - my-db:/var/lib/mysql
#  # Names our volume
#  volumes:
#   my-db:

#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

